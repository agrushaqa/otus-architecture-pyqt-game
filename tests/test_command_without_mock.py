import register
from features.steps.src.commands.generated_adapters.autogen_adapter_movable \
    import AutoGeneratedMovableAdapter
from features.steps.src.commands.generated_adapters.autogen_adapter_rotable\
    import AutoGeneratedRotableAdapter
from features.steps.src.commands.ubject2d import UObject2D
from features.steps.src.ioc.common import IoC
from features.steps.src.scope import Scopes


class TestCommandWithoutMock:

    def test_move(self):
        ioc = IoC()
        scope = Scopes()
        obj = UObject2D()
        register.RegisterOperations().register(ioc, scope, obj)
        movable = AutoGeneratedMovableAdapter(obj, ioc)
        movable.set_position([int(12), int(5)])
        movable.set_velocity([int(-5), int(2)])
        move_command = ioc.resolve("Commands.Move", movable).execute()
        move_command.execute()
        position = movable.get_position()
        assert position == [7, 7]

    def test_move_with_direction(self):
        ioc = IoC()
        scope = Scopes()
        obj = UObject2D()
        register.RegisterOperations().register(ioc, scope, obj)
        rotable = AutoGeneratedRotableAdapter(obj, ioc)
        movable = AutoGeneratedMovableAdapter(obj, ioc)
        movable.set_position([int(12), int(5)])
        movable.set_velocity([int(-5), int(2)])
        rotable.set_directions_number(12)
        rotable.set_direction(1)
        change_velocity_command = ioc.resolve("Commands.ChangeVelocity",
                                              movable,
                                              rotable).execute()
        change_velocity_command.execute()
        move_command = ioc.resolve("Commands.Move", movable).execute()
        move_command.execute()
        position = movable.get_position()
        assert position == [8, 12]

    def test_rotate(self):
        pass
