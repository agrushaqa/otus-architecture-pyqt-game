import json

import register
from features.steps.src.commands.generated_adapters.autogen_adapter_movable \
    import AutoGeneratedMovableAdapter
from features.steps.src.commands.start_working_thread import ThreadConfig
from features.steps.src.commands.ubject2d import UObject2D
from features.steps.src.ioc.common import IoC
from features.steps.src.scope import Scopes
from game import Game


class TestConvertJsonToOperation:
    def test_init_without_thread(self):
        json_str = '{"game_id": 1, "object_id":1, "operation_id":1,' \
                   ' "args": {"x":5, "y": 7}}'
        json_dict = json.loads(json_str)
        mytask_args = [json_dict["args"]["x"], json_dict["args"]["y"]]
        ioc = IoC()
        scope = Scopes()
        obj = UObject2D()
        mygame = Game(obj)
        reg_op = register.RegisterOperations()
        reg_op.register(ioc, scope, obj)
        game_id = mygame.new_game("main")
        movable1 = AutoGeneratedMovableAdapter(obj, ioc)
        ball_object_id = reg_op.add_object(ioc, game_id, "ball", movable1)
        reg_op.add_operation(ioc,
                             game_id,
                             ball_object_id,
                             movable1.set_position)
        reg_op.add_operation(ioc,
                             game_id,
                             ball_object_id,
                             movable1.get_position)
        reg_op.add_operation(ioc,
                             game_id,
                             ball_object_id,
                             movable1.set_velocity)
        reg_op.add_operation(ioc,
                             game_id,
                             ball_object_id,
                             movable1.get_velocity)
        operation_id = ioc.resolve("Operation.get_entity",
                                   f'{json_dict["game_id"]}.'
                                   f'{json_dict["object_id"]}.'
                                   f'{json_dict["operation_id"]}'
                                   ".operation_id").execute()
        operation_id(mytask_args)
        assert movable1.get_position() == [5, 7]

    def test_init_thread(self):
        json_str = '{"game_id": 1, "object_id":1, "operation_id":1,' \
                   ' "args": {"x":5, "y": 7}}'
        json_dict = json.loads(json_str)
        mytask_args = [json_dict["args"]["x"], json_dict["args"]["y"]]

        def mytask(ioc):
            ioc.resolve("Operation.get_entity",
                        f'{json_dict["game_id"]}.'
                        f'{json_dict["object_id"]}.'
                        f'{json_dict["operation_id"]}'
                        ".operation_id", )(mytask_args)

        ioc = IoC()
        scope = Scopes()
        obj = UObject2D()
        mygame = Game(obj)
        reg_op = register.RegisterOperations()
        reg_op.register(ioc, scope, obj)
        game_id = mygame.new_game("main")
        movable1 = AutoGeneratedMovableAdapter(obj, ioc)
        ball_object_id = reg_op.add_object(ioc, game_id, "ball", movable1)
        reg_op.add_operation(ioc,
                             game_id,
                             ball_object_id,
                             movable1.set_position)
        reg_op.add_operation(ioc,
                             game_id,
                             ball_object_id,
                             movable1.get_position)
        reg_op.add_operation(ioc,
                             game_id,
                             ball_object_id,
                             movable1.set_velocity)
        reg_op.add_operation(ioc,
                             game_id,
                             ball_object_id,
                             movable1.get_velocity)
        operation_id = ioc.resolve("Operation.get_entity",
                                   f'{json_dict["game_id"]}.'
                                   f'{json_dict["object_id"]}.'
                                   f'{json_dict["operation_id"]}'
                                   ".operation_id").execute()
        operation_id(mytask_args)

        thread_config = ThreadConfig()
        thread_config.set_ioc(ioc)
        thread_config.set_scope(scope)
        thread_config.set_task(mytask)

        # command_queue1 = IocCommandQueue()
        # thread_config.set_task(command_queue1.commands_worker)
        # scope.current(ioc)
        # myscope = thread_config.get_scope()
        # command_queue1.add_ioc_command("ScopeCurrent",
        #                                myscope,
        #                                thread_config.get_ioc(),
        #                                "game1")

        ioc.resolve("StartBlockedThreadCommand",
                    thread_config).execute().execute()
        assert movable1.get_position() == [5, 7]
